/*!
 * \file mchatv1_utils.h
 * \author Sean Tracy
 * \date 27 March 2017
 * \version 0.0.1
 * \brief Miscellaneous internal utility functions for libmchat
 *
 * \details
 * This file contains some utility functions used throughout libmchat
 * internally.
 */
#ifndef MCHATV1_UTILS_H
#define MCHATV1_UTILS_H

#include "mchatv1_structs.h"

#define MCHAT_CHANNEL_HASH_FNV_PRIME 0x01000193
#define MCHAT_CHANNEL_HASH_FNV_OFFSET 0x811C9DC5

/*!
 * \brief Find a channel in an mchat object by id (Internal Function)
 * \param array Pointer to the array to traverse
 * \param channel_name Character array of the channel name
 * \return A pointer to an mchat_channel object if found, or NULL if not
 *
 * \note This function is a lot less efficient than ::channel_query_by_id, so use
 * that whenever possible.
 *
 */
mchat_channel *channel_query_by_name(GPtrArray *array, char *channel_name);

/*!
 * \brief Find a channel in an mchat object by id (Internal Function)
 * \param array Pointer to the array to traverse
 * \param channel_id The channel id number (hash)
 * \return A pointer to an mchat_channel object if found, or NULL if not
 *
 */
mchat_channel *channel_query_by_id(GPtrArray *array, unsigned int channel_id);

/*!
 * \brief Find a peer by nickname in the peer-list
 * \param mchat Pointer to an mchat object
 * \param address Source address of the peer case to an unsigned integer
 * \return 0 or a positive number if the nickname is found, -1 if not
 *
 * \warning
 * This function is not Thread-safe.  Callers need to do their own locking.
 */
int peerlist_query(mchat_t *mchat, guint32 address);

/*!
 * \brief Update peer_list, removing peers not seen for the timeout interval
 * \param mchat Pointer to an mchat object
 * \return 0 on success or -1 on error
 */
int peerlist_expire(mchat_t *mchat);

/*!
 * \brief Update or add a new peerlist entry
 * \param mchat Pointer to an mchat object
 * \param parsed_message Parsed message struct
 * \param address IPv4 address converted into an unsiged 32 bit integer
 * \return 0 on success or -1 on error
 */
int peerlist_update_peer(mchat_t *mchat, mchat_parser parsed_message, guint32 address);

/*!
 * \brief Hash as channel struct to a channel ID number
 * \param chan Pointer to an mchat channel struct
 * \return The hash value
 *
 * \details
 * Channel storage and updates are done via a ID lookup.  This id is generated by
 * using the Fowler/Noll/Vo (FNV) hash method.
 */
unsigned int mchat_channel_hash_struct(mchat_channel *chan);

/*!
 * \brief Hash individual channel parameters to a channel ID Number
 * \param name Character array of the channel name
 * \param addr Character array of the channel IP address
 * \param portno Port number of the channel
 * \return  The hash value
 */
unsigned int mchat_channel_hash_params(guchar *name, guchar *addr, guint16 portno);

/*!
 * \brief Function passed to GPtrArrays for freeing mchat channels
 * \param data Pointer to mchat channel struct cast to gpointer (void *)
 */
void mchat_channel_destroy(gpointer data);

/*!
 * \brief Create a deep copy of an mchat channel
 * \param src Source channel to copy
 * \return A new mchat channel struct
 */
mchat_channel *mchat_channel_copy(mchat_channel *src);

/*!
 * \brief Update or create a new channel record from a CDSC message
 * \param mchat Pointer to an mchat object
 * \param parsed_message Pointer to mchat parser object
 * \return 0 on success or -1 on error
 */
int mchat_channel_update(mchat_t *mchat, mchat_parser *parsed_message);

/*!
 * \brief Update the cdsc_channels list, removing entries that have expired
 * \param mchat Pointer to an mchat object
 * \return 0 on success or -1 on error
 */
int mchat_channel_expire(mchat_t *mchat);

#endif // MCHATV1_UTILS_H
